/*题目描述
输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，
最长路径的长度为树的深度。*/

/*思路
* 我们还可以从另外一个角度来理解树的深度。如果一棵树只有一个节点，那么它的深度为1。如果根节点
* 只有左子树而没有右子树，那么树的深度应该是其左子树的深度加1；同样，如果根节点只有右子树而没
* 有左子树，那么树的深度应该是其右子树的深度加1。如果既有右子树又有左子树，那么该树的深度就是
* 其左、右子树深度的较大值再加1。比如，在图6.2所示的二叉树中，根节点为1的树有左、右两棵子树，
* 其左、右子树的根节点分别为节点2和节点3。根节点为2的左子树的深度为3，而根节点为3的右子树的
* 深度为2，因此，根节点为1的树的深度就是4。
这种思路用递归的方法很容易实现，只需对遍历的代码稍作修改即可。*/
public class 循环和递归_二叉树的深度 {
    public int TreeDepth(TreeNode root) {
        if(root == null)
            return 0;
        int nLeft = TreeDepth(root.left);
        int nRight = TreeDepth(root.right);
        return (nLeft>nRight)?(nLeft+1):(nRight+1);
    }
}
